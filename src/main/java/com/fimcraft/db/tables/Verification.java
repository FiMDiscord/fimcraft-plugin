/*
 * This file is generated by jOOQ.
 */
package com.fimcraft.db.tables;


import com.fimcraft.db.DefaultSchema;
import com.fimcraft.db.Keys;
import com.fimcraft.db.tables.records.VerificationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Verification extends TableImpl<VerificationRecord> {

    private static final long serialVersionUID = -477093562;

    /**
     * The reference instance of <code>verification</code>
     */
    public static final Verification VERIFICATION = new Verification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VerificationRecord> getRecordType() {
        return VerificationRecord.class;
    }

    /**
     * The column <code>verification.uuid</code>.
     */
    public final TableField<VerificationRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>verification.key</code>.
     */
    public final TableField<VerificationRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>verification</code> table reference
     */
    public Verification() {
        this(DSL.name("verification"), null);
    }

    /**
     * Create an aliased <code>verification</code> table reference
     */
    public Verification(String alias) {
        this(DSL.name(alias), VERIFICATION);
    }

    /**
     * Create an aliased <code>verification</code> table reference
     */
    public Verification(Name alias) {
        this(alias, VERIFICATION);
    }

    private Verification(Name alias, Table<VerificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Verification(Name alias, Table<VerificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Verification(Table<O> child, ForeignKey<O, VerificationRecord> key) {
        super(child, key, VERIFICATION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VerificationRecord> getPrimaryKey() {
        return Keys.PK_VERIFICATION;
    }

    @Override
    public List<UniqueKey<VerificationRecord>> getKeys() {
        return Arrays.<UniqueKey<VerificationRecord>>asList(Keys.PK_VERIFICATION, Keys.SQLITE_AUTOINDEX_VERIFICATION_2);
    }

    @Override
    public Verification as(String alias) {
        return new Verification(DSL.name(alias), this);
    }

    @Override
    public Verification as(Name alias) {
        return new Verification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Verification rename(String name) {
        return new Verification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verification rename(Name name) {
        return new Verification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
